# Generated from gramatica.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,143,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,5,8,87,
        8,8,10,8,12,8,90,9,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,5,13,102,8,13,10,13,12,13,105,9,13,1,13,1,13,1,14,4,14,110,
        8,14,11,14,12,14,111,1,14,1,14,4,14,116,8,14,11,14,12,14,117,3,14,
        120,8,14,1,15,1,15,1,15,1,15,1,15,3,15,127,8,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,0,0,22,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,5,1,0,
        97,122,3,0,48,57,65,90,97,122,8,0,9,10,32,33,44,44,46,46,48,59,63,
        63,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,151,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,1,45,1,0,0,0,3,51,1,0,0,0,5,57,1,0,0,0,7,61,1,0,0,0,9,66,
        1,0,0,0,11,72,1,0,0,0,13,77,1,0,0,0,15,82,1,0,0,0,17,84,1,0,0,0,
        19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,27,99,1,
        0,0,0,29,109,1,0,0,0,31,126,1,0,0,0,33,128,1,0,0,0,35,130,1,0,0,
        0,37,132,1,0,0,0,39,134,1,0,0,0,41,136,1,0,0,0,43,139,1,0,0,0,45,
        46,5,115,0,0,46,47,5,116,0,0,47,48,5,97,0,0,48,49,5,114,0,0,49,50,
        5,116,0,0,50,2,1,0,0,0,51,52,5,115,0,0,52,53,5,116,0,0,53,54,5,111,
        0,0,54,55,5,112,0,0,55,56,5,59,0,0,56,4,1,0,0,0,57,58,5,73,0,0,58,
        59,5,110,0,0,59,60,5,116,0,0,60,6,1,0,0,0,61,62,5,82,0,0,62,63,5,
        101,0,0,63,64,5,97,0,0,64,65,5,108,0,0,65,8,1,0,0,0,66,67,5,76,0,
        0,67,68,5,111,0,0,68,69,5,103,0,0,69,70,5,105,0,0,70,71,5,99,0,0,
        71,10,1,0,0,0,72,73,5,101,0,0,73,74,5,99,0,0,74,75,5,104,0,0,75,
        76,5,111,0,0,76,12,1,0,0,0,77,78,5,116,0,0,78,79,5,97,0,0,79,80,
        5,107,0,0,80,81,5,101,0,0,81,14,1,0,0,0,82,83,5,61,0,0,83,16,1,0,
        0,0,84,88,7,0,0,0,85,87,7,1,0,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,
        1,0,0,0,88,89,1,0,0,0,89,18,1,0,0,0,90,88,1,0,0,0,91,92,5,44,0,0,
        92,20,1,0,0,0,93,94,5,59,0,0,94,22,1,0,0,0,95,96,5,40,0,0,96,24,
        1,0,0,0,97,98,5,41,0,0,98,26,1,0,0,0,99,103,5,34,0,0,100,102,7,2,
        0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,
        0,0,104,106,1,0,0,0,105,103,1,0,0,0,106,107,5,34,0,0,107,28,1,0,
        0,0,108,110,7,3,0,0,109,108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,
        0,0,111,112,1,0,0,0,112,119,1,0,0,0,113,115,5,44,0,0,114,116,7,3,
        0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,
        0,0,118,120,1,0,0,0,119,113,1,0,0,0,119,120,1,0,0,0,120,30,1,0,0,
        0,121,127,3,33,16,0,122,127,3,35,17,0,123,127,3,37,18,0,124,127,
        3,39,19,0,125,127,3,41,20,0,126,121,1,0,0,0,126,122,1,0,0,0,126,
        123,1,0,0,0,126,124,1,0,0,0,126,125,1,0,0,0,127,32,1,0,0,0,128,129,
        5,43,0,0,129,34,1,0,0,0,130,131,5,45,0,0,131,36,1,0,0,0,132,133,
        5,42,0,0,133,38,1,0,0,0,134,135,5,47,0,0,135,40,1,0,0,0,136,137,
        5,43,0,0,137,138,5,43,0,0,138,42,1,0,0,0,139,140,7,4,0,0,140,141,
        1,0,0,0,141,142,6,21,0,0,142,44,1,0,0,0,9,0,86,88,101,103,111,117,
        119,126,1,6,0,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    ID = 9
    VG = 10
    PV = 11
    AP = 12
    FP = 13
    TEXT = 14
    NUM = 15
    OP = 16
    SUM = 17
    SUB = 18
    MUL = 19
    DIV = 20
    CONCAT = 21
    BLANK = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'start'", "'stop;'", "'Int'", "'Real'", "'Logic'", "'echo'", 
            "'take'", "'='", "','", "';'", "'('", "')'", "'+'", "'-'", "'*'", 
            "'/'", "'++'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "VG", "PV", "AP", "FP", "TEXT", "NUM", "OP", "SUM", "SUB", 
            "MUL", "DIV", "CONCAT", "BLANK" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "ID", "VG", "PV", "AP", "FP", "TEXT", "NUM", "OP", 
                  "SUM", "SUB", "MUL", "DIV", "CONCAT", "BLANK" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


